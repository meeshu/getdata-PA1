}
columnmeans(airquality)
columnmeans <-function(x){
means<-0
for (i in seq_len(ncol(x))){
means[i]<-mean(x[,i])
}
means
}
columnmeans(airquality)
columnmeans <-function(x,removeNA=TRUE){
means<-0
for (i in seq_len(ncol(x))){
means[i]<-mean(x[,i],na.rm=removeNA)
}
means
}
columnmeans(airquality)
args(columnmeans)
columnmeans <-function(x,removeNA=TRUE){
for (i in seq_len(ncol(x))){
means[i]<-mean(x[,i],na.rm=removeNA)
}
means
}
columnmeans(airquality)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
z<-10
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
get("z", envir=f)
ls(environment(f))
get("z", environment=f)
get("z", environment="f")
get("z", environment(f))
get("z", environment(g))
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
f(3)
z<-10
f(3)
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
x<-10
h()
h <- function() {
+   y <- 2
+   i <- function() {
+     z <- 3
+     c(x, y, z)
+   }
+   i()
+ }z
library(datasets)
data(iris)
?iris
dimnames(iris3)
head(iris3)
head(iris)
colmeans(iris3,dims=2)
colMeans(iris3,dims=2)
tapply(iris$Sepal.Length,Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
?colMeans
colMeans(iris3,dims=c(2,3))
colMeans(iris3,dims=c(1,2))
colMeans(iris3,dims=2)
.colMeans(iris3,dims=3)
colMeans(iris3,dims=3)
dim(iris3)
?iris3
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
mtcars
with(mtcars, tapply(mpg, cyl, mean))
tapply(mpg, cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
?diff
dimnams(tapply(mtcars$mpg, mtcars$cyl, mean))
dimnames(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)$8-tapply(mtcars$mpg, mtcars$cyl, mean)$4
tapply(mtcars$mpg, mtcars$cyl, mean)$"8"
lapply(tapply(mtcars$mpg, mtcars$cyl, mean),diff,lag=2)
lapply(tapply(mtcars$mpg, mtcars$cyl, mean),diff)
class(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)[,1]
dim(tapply(mtcars$mpg, mtcars$cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)[1,]
tapply(mtcars$mpg, mtcars$cyl, mean)
calcdiff<-tapply(mtcars$mpg, mtcars$cyl, mean)
calcdiff
calcdiff[3]
abs(tapply(mtcars$mpg, mtcars$cyl, mean)[3]-tapply(mtcars$mpg, mtcars$cyl, mean)[2])
abs(tapply(mtcars$mpg, mtcars$cyl, mean)[3]-tapply(mtcars$mpg, mtcars$cyl, mean)[1])
debug(ls)
ls
abs(tapply(mtcars$hp, mtcars$cyl, mean)[3]-tapply(mtcars$hp, mtcars$cyl, mean)[1])
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
library(swirl)
ls()
rm(list=ls())
swirl()
sirl()
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-(z/my_sqrt)
my_div<-z / my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
?file.renamw
?file.rename
file.rename("mytest.R","mytest2.R")
?file.copy
file.copy("mytest2.R","mytest3.R")
?file.path
file.path("mytest3.R")
file.path("folder1","folder2",fsep="/")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
?unlink
unlink("testdir2",recursive=TRUE)
setwd(old.dir)
unlink("testdir",recursive=TRUE)
1:20
pi:10
15:1
`:`
?`:`
seq(1,20)
seq(1,20,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("my","name","is")
my_char<-c("My","name","is")
my_char
paste(my_char,collapse=" ")
my_name<-c(my_char,"Meeshu")
my_name
paste(my_name,collapse=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep="-")
x<c(44,NA,5,NA)
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-(c(y,z),100)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)& x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
c(11,2,NA)
vect<-c(11,2,NA)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
True==True
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My not really first function!')
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
submit()
remainder(11, 5)
submit()
remainder(divisor = 11, num= 5)
remainder(4, div = 2)
args(remainder)
exit()
exit
help
help()
bye()
library(swirl)
rm(list=ls())
swirl()
exit
bye()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,unique(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plant$Active_Growth_Period)
table(plants$Active_Growth_Period)
str(plants)
bye()
install.packages("kernlab")
library(kernlab)
str(spam)
data(spam)
str(spam)
str(spam[,1:5])
install.packages("ProjectTemplate")
library(swirl)
rm(list=ls())
swirl()
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
sample(LETTERS)
flips(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips<-sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size=100,prob=0.7)
flips2<-rbinom(100,size=1,prob=0.7)
flips2
sum(flips2)
?rnorm()
bye
bye()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
axis()
?axis
?text
?lines
?llines
?trellis.par.set
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library.packages("ggplot2")
install.packages("ggplot2")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?geom
?ggplot2
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?qplot
package.install("xtable")
packages.install("xtable")
install.packages("xtable")
setwd("C:/data/getdata-PA1")
names<-unzip("activity.zip",list=TRUE)$Name
#From observing names, save files from names[16:18] & names[30:32] in separate data frames called file_1, file_2 etc.
for(i in 1:length(names)){
if(i %in% 16:18 | i %in% 30:32){
tempfile<-read.csv(names[i],sep="",header=FALSE)
assign(paste("file",as.character(i),sep="_"),tempfile)
}
}
#read featurex.txt's 2nd col as a vector
tempfile<-read.csv(names[2],sep="",header=FALSE,col.names=c("feature_id","feature"))
featurelist<-tempfile$feature
#file_30 training subject and file_16 test subject converting to character var and naming it "subject_id"
colnames(file_16)<-"subject_id"
colnames(file_30)<-"subject_id"
#file_18 & file_32 cols are renamed as "activity_id"
colnames(file_18)<-"activity_id"
colnames(file_32)<-"activity_id"
#file_17 test set and file_31 training set 's 561 columns are assigned the names from featurelist
colnames(file_17)<-featurelist
colnames(file_31)<-featurelist
#combine file_17 and file_16 subject id with feature and repeat the same for file_31 and file_30
file_17<-cbind(file_16$subject_id,file_17)
file_31<-cbind(file_30$subject_id,file_31)
colnames(file_17)[colnames(file_17)=="file_16$subject_id"] <- "subject_id"
colnames(file_31)[colnames(file_31)=="file_30$subject_id"] <- "subject_id"
#combine file_17 and file_18 activity id with feature and repeat the same for file_31 and file_32
file_17<-cbind(file_18$activity_id,file_17)
file_31<-cbind(file_32$activity_id,file_31)
colnames(file_17)[colnames(file_17)=="file_18$activity_id"] <- "activity_id"
colnames(file_31)[colnames(file_31)=="file_32$activity_id"] <- "activity_id"
#change names for better undrstanding and drop old table to make space
testset<-file_17
trainset<-file_31
rm(list=c("file_17","file_31","tempfile","file_16","file_18","file_30","file_32"))
#modify table variable names to be "match"-able
valid_column_names <- make.names(names=names(testset), unique=TRUE, allow_ = TRUE)
names(testset) <- valid_column_names
valid_column_names <- make.names(names=names(trainset), unique=TRUE, allow_ = TRUE)
names(trainset) <- valid_column_names
#Keep only the columns containing mean and std deviation clear old tables
library(dplyr)
testsetmsd<-select(testset,matches("mean|std|subject_id|activity_id"))
trainsetmsd<-select(trainset,matches("mean|std|subject_id|activity_id"))
rm(list=c("testset","trainset","featurelist","i","names","valid_column_names"))
#join the two tables to make a master table and order according to subject_id
library(data.table)
mastertable<-data.table(arrange(rbind(testsetmsd,trainsetmsd),subject_id))
#map activity_id to their activity names using the table in activity_labels.txt and rename
mastertable[,activity_id:=as.character(ifelse(activity_id==1,"Walking",ifelse(activity_id==2,"Walking_Upstairs",ifelse(activity_id==3,"Walking_Downstairs",ifelse(activity_id==4,"Sitting",ifelse(activity_id==5,"Standing","Laying"))))))]
dplyr::rename(mastertable,activity=activity_id)
mastertable:=dplyr::rename(mastertable,activity=activity_id)
mastertable<-dplyr::rename(mastertable,activity=activity_id)
ddply(mastertable,.(subject_id,activity),mean)
library(plyr)
ddply(mastertable,.(subject_id,activity),mean)
?aggregate
aggregate(mastertable,by=list(subject_id,activity),FUN="mean")
aggregate(mastertable,by=list(mastertable$subject_id,mastertable$activity),FUN="mean")
tidy<-aggregate(mastertable,by=list(mastertable$subject_id,mastertable$activity),FUN="mean")
head(tidy)
tidy<-ddply(mastertable,.(subject_id,activity),numcolwise(mean))
head(tidy)
?write.table
write.table(tidy,file="tidydata.txt",row.names=FALSE)
str(tidy)
